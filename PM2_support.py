#! /usr/bin/env python
"""
# Support module generated by PAGE version 4.4.4 for power module
# In conjunction with Tcl version 8.6
#    Aug 09, 2015 12:13:46 PM
# HJK Aug 2015 This is the section where the button actions are implemented
# HJK Oct 2015 extended, This module now implements all factory logic for the power module main screen
"""

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import comportconfig            # serial port configurator form
import comportconfig_support    # suppirt module for serial port configurator
import serialport
import threading
import time

def do_bat1():
    serialport.do_bat1()

def do_bat2():
    serialport.do_bat2()

def do_bat_off():
    serialport.do_bat_off()

def do_out1():
    serialport.do_out1()

def do_out2():
    serialport.do_out2()

def do_out3():
    serialport.do_out3()

def do_out4():
    serialport.do_out4()

def do_out5():
    serialport.do_out5()

def do_out6():
    serialport.do_out6()

def do_all_off():
    serialport.do_all_off()

def config_comport():
    print('PM2_support.config_comport')
    comportconfig.create_ComportConfig(root)
    sys.stdout.flush()
    serialconfig = comportconfig_support.Readconfig()
    updatetitle('Test_Comport1 ' + ',' + serialconfig['baudrate'] + ',' + serialconfig['comport'])

# Connect and disconnect serial port button handler
def connect_comport():
    global w
    if serialport.isportopen():  # if port open close it
        w.led_connect.configure(background="white")
        w.btn_Connect.configure(text='''Connect''')
        print('PM2_support.connect_comport')
        updatetitle('Disconnected')
        serialport.close_serial()
    else:
        serialconfig = comportconfig_support.Readconfig()  # otherwise open it
        print('Open serial settings',serialconfig)
        print('PM2_support.connect_comport')
        sys.stdout.flush()
        updatetitle('Open Comport1 ' + ',' + serialconfig['baudrate'] + ',' + serialconfig['comport'])
        serialport.open_serial()
        w.btn_Connect.configure(text='''Disconnect''')
        w.led_connect.configure(background="green")

    sys.stdout.flush()

# send line to serial port
def send():
    sendstring = w.Entry1.get()
    w.Entry1.delete(0, 'end')
    #sendstring = '$11'
    print('PM2_support.send' + sendstring)
    serialport.send(sendstring)
    sys.stdout.flush()

# print line in log window
def dumpline(dline):
    w.text1.insert(END,dline + '\r\n' )
#    root.text1.

def updatetitle(windowtitle):
    global root
    root.title(windowtitle)
 #   root.title('Test_Comport1 ')

def init(top, gui, arg=None):
    print('Object finished)')
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    serialconfig = comportconfig_support.Readconfig()
    updatetitle('SWC1 Comport1: ' + ',' + serialconfig['baudrate'] + ',' + serialconfig['comport'])

    t = threading.Thread(target=do_update)      # create read thread to refresh form status
    t.setDaemon(1)
    t.start()
 #   t = threading.Timer(1.0, do_update())      # start timer thread
#    t.start()

    print('Init PM2 support(support)')

def destroy_window():
    # Function which closes the window.
    global top_level
    serialport.close_serial()
    print('Object finished)')
    top_level.destroy()
    top_level = None


#------------- Request periodic status refresh  of form--------------------
formrefreshtime = 0.3  # update time form refresh from PM variables
# send periodic command to power module for status update
def do_update():
    global t
    while 1:
#        print('Thread form update')
        time.sleep(formrefreshtime)
        if serialport.isportopen():
            w.led_connect.configure(background="green")  # connected indicator
        else:
            w.led_connect.configure(background="white")

        if serialport.pmstatus.batterystatus[0] == 1:   # bat1 indicator
            w.e_bat1.configure(background="red")
        else:
            w.e_bat1.configure(background="white")

        if serialport.pmstatus.batterystatus[1] == 1:   # bat2 indicator
            w.e_bat2.configure(background="red")
        else:
            w.e_bat2.configure(background="white")

        if serialport.pmstatus.outputstatus[0] == 1:   # out1 indicator
            w.e_out1.configure(background="red")
        else:
            w.e_out1.configure(background="white")

        if serialport.pmstatus.outputstatus[1] == 1:   # out2 indicator
            w.e_out2.configure(background="red")
        else:
            w.e_out2.configure(background="white")

        if serialport.pmstatus.outputstatus[2] == 1:   # out3 indicator
            w.e_out3.configure(background="red")
        else:
            w.e_out3.configure(background="white")

        if serialport.pmstatus.outputstatus[3] == 1:   # out4 indicator
            w.e_out4.configure(background="red")
        else:
            w.e_out4.configure(background="white")

        if serialport.pmstatus.outputstatus[4] == 1:   # out5 indicator
            w.e_out5.configure(background="red")
        else:
            w.e_out5.configure(background="white")

        if serialport.pmstatus.outputstatus[5] == 1:   # out6 indicator
            w.e_out6.configure(background="red")
        else:
            w.e_out6.configure(background="white")

        w.text1.delete(1.0, END)        # erase text field for new round
        dline = serialport.pmstatus.version[0] + ' ' +  serialport.pmstatus.version[1] + ' ' +  serialport.pmstatus.version[2]
        w.text1.insert(END, dline + '\r\n\r\n' )

        for index in range(16):         # print adc values
            dline = str(index) + ' {:>10}'.format(serialport.pmstatus.adclabels[index]) + ' %6.3f'   % (serialport.pmstatus.adc_avg[index])
            dline = dline + ' %6.3f'   % (serialport.pmstatus.adc_min[index])
            dline = dline + ' %6.3f'   % (serialport.pmstatus.adc_max[index])
            w.text1.insert(END, dline + '\r\n' )
